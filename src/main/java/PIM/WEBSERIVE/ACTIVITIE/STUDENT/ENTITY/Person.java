package PIM.WEBSERIVE.ACTIVITIE.STUDENT.ENTITY;
// default package
// Generated 15 �.�. 2561, 22:08:47 by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnore;

import PIM.WEBSERIVE.ACTIVITIE.STUDENT.ENTITY.Account;
import PIM.WEBSERIVE.ACTIVITIE.STUDENT.ENTITY.Major;
import PIM.WEBSERIVE.ACTIVITIE.STUDENT.ENTITY.Phone;

/**
 * Person generated by hbm2java
 */
@Entity
@Table(name = "person", catalog = "pim_activitie_student")
public class Person implements java.io.Serializable {

	private String personId;
	private Major major;
	private String personGender;
	private String personNameFirst;
	private String personNameLast;
	private Date personBirthdate;
	@JsonIgnore
	private Date personUpdateLast;
	@JsonIgnore
	private Set<Account> accounts = new HashSet<Account>(0);
	@JsonIgnore
	private Set<Phone> phones = new HashSet<Phone>(0);

	public Person() {
	}

	public Person(String personId, Major major, String personGender, String personNameFirst, String personNameLast,
			Date personBirthdate, Date personUpdateLast) {
		this.personId = personId;
		this.major = major;
		this.personGender = personGender;
		this.personNameFirst = personNameFirst;
		this.personNameLast = personNameLast;
		this.personBirthdate = personBirthdate;
		this.personUpdateLast = personUpdateLast;
	}

	public Person(String personId, Major major, String personGender, String personNameFirst, String personNameLast,
			Date personBirthdate, Date personUpdateLast, Set<Account> accounts, Set<Phone> phones) {
		this.personId = personId;
		this.major = major;
		this.personGender = personGender;
		this.personNameFirst = personNameFirst;
		this.personNameLast = personNameLast;
		this.personBirthdate = personBirthdate;
		this.personUpdateLast = personUpdateLast;
		this.accounts = accounts;
		this.phones = phones;
	}

	@Id

	@Column(name = "person_id", unique = true, nullable = false, length = 15)
	public String getPersonId() {
		return this.personId;
	}

	public void setPersonId(String personId) {
		this.personId = personId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "major_id", nullable = false)
	public Major getMajor() {
		return this.major;
	}

	public void setMajor(Major major) {
		this.major = major;
	}

	@Column(name = "person_gender", length = 5)
	public String getPersonGender() {
		return this.personGender;
	}

	public void setPersonGender(String personGender) {
		this.personGender = personGender;
	}

	@Column(name = "person_name_first", nullable = false, length = 50)
	public String getPersonNameFirst() {
		return this.personNameFirst;
	}

	public void setPersonNameFirst(String personNameFirst) {
		this.personNameFirst = personNameFirst;
	}

	@Column(name = "person_name_last", nullable = false, length = 50)
	public String getPersonNameLast() {
		return this.personNameLast;
	}

	public void setPersonNameLast(String personNameLast) {
		this.personNameLast = personNameLast;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "person_birthdate", nullable = false, length = 10)
	public Date getPersonBirthdate() {
		return this.personBirthdate;
	}

	public void setPersonBirthdate(Date personBirthdate) {
		this.personBirthdate = personBirthdate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "person_update_last", length = 19)
	public Date getPersonUpdateLast() {
		return this.personUpdateLast;
	}

	public void setPersonUpdateLast(Date personUpdateLast) {
		this.personUpdateLast = personUpdateLast;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<Account> getAccounts() {
		return this.accounts;
	}

	public void setAccounts(Set<Account> accounts) {
		this.accounts = accounts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<Phone> getPhones() {
		return this.phones;
	}

	public void setPhones(Set<Phone> phones) {
		this.phones = phones;
	}

	@Override
	public String toString() {
		return "Person [personId=" + personId + ", majorName=" + major.getMajorName() + ", personGender=" + personGender
				+ ", personNameFirst=" + personNameFirst + ", personNameLast=" + personNameLast + ", personBirthdate="
				+ personBirthdate + "]";
	}

}
